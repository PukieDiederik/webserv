# Each block will begin with an identifier (cgi, server, route, etc...)
# followed by any amount of whitespace (excluding newline, at least 1 whitepace
# character required) and and an opening curly bracket '{' and a newline. Than
# options will come for that block. The block ends with a closing curly bracket
# '}' on a new line.
#
# Each option will start with a name and then have "arguments" added after
# seperated by whitespace
#
# Comments can be made using a hashtag '#' and everything after this hashtag is
# considered a comment until a newline is encoutered.

# Specificies some information about how to handle cgi
# It's not required to have a cgi block, this would just mean that CGI is
# disabled and can't be used.
#
# When dealing with parameters inside brackets ([]), each string is contained between quotes ("")
# and said strings are separated by a comma.
#
# Can only have 0 or 1 cgi blocks
cgi {
    # cgi_add will add a way of running cgi based on a file extension
    #
    # The command to run has each argument as a different element in the array.
    # For example, if you need to run extra options to python it might look
    # something like: cgi_add ["py", "python"] ["/bin/python", "-E"]
    # The path to the executable should be an absolute path. The file to be run
    # will be the last argument added. So in the case below if you
    # had a file called run.py it would call: /bin/python run.py 
    #
    # Format: cgi_add <array of file extensions> <array of a command to run>
    # Can have multiple in a cgi block.
    cgi_add ["py","python"] ["/bin/python"]
}

# Defines mime types 
mime {
    # Adds a mime type to use for a file extension
    #
    # When requesting a file this will help with setting the content type in
    # the http header. If the type cannot be matched it will use 'text/plain'.
    #
    # Format: mime_add <array of file extensions> <what it maps to> 
    # Can have multiple in a mime block
    mime_add ["js"] "text/javascript"
}

# Information about a server
#
# Can have multiple server blocks
server {
    # Sets the port to listen to for this server.
    #
    # One per server block, required. 
    port 80

    # What hostsnames this will serve. This is only really used if multiple
    # servers are opened on the same port.
    #
    # One per server block, required.
    server_names ["intra.42.fr"]

    # Sets up a default error page for a certain code. This can override
    # default error pages.
    #
    # Format: error_page <error code> <path to error page>
    #
    # Can have 0 or more per server, error code has to be unique.
    error_pages ["404","403"] ["error_pages/404.html","error_pages/403_html"]

    # The maximum size a body can be in a request. If its over this number it
    # will be discarded.
    #
    # one per server
    max_body_size 123;

    # The root of all server files. This is expected to be an absolute path.
    #
    # One per server block, required.
    root "/var/www"

    # Will setup a route
    # Format: route <route path>
    route "/" {
        # If this tag is present, it enables directory listing. If this tag is
        # not specified, directory listing will be turned off.
        #
        # One per route block. If both index and auto_index are present in a
        # route block, auto_index will be used.
        auto_index

        # If this tag is present, it enables directory cgi. If this tag is
        # not specified, cgi will not be run. It runs the cgi based on the
        # cgi block above.
        #
        # One per route block.
        enable_cgi

        # What methods to accept and process. If this block is not specified it
        # will accept all methods.
        #
        # Format: methods <array of methods>
        # One per route block.
        methods ["GET","POST","PATCH","PUT"]

        # The root folder of this route. This will use a relative path to the
        # root defined in the server block. So in this case it will look into:
        # `/var/www/html`. If you want this to use `/html`, you can use a
        # forward slash before the folder to use an absolute path. So in this
        # case you could use `/html` in the route to map to `/html`.
        #
        # One per route block.
        root "html"
    }

    route "/redirect" {
        # When using this route it will redirect to this server's root route.
        # You can set another server by providing a URL instead of a path. A
        # path should always start with a forward slash '/'. All other options
        # provided are ignored.
        #
        # Format: redirect <path to redirect to>
        # Example: redirect "/"
        # OR
        # Format: redirect <site to redirect to>
        # Example: redirect "http://google.com"
        redirect "/"
    }

    route "/index"
    {
        # This tag will server the index file given when a directory is
        # requested.
        #
        # Format: index <index file string (relative to root)>
        #
        # One per route block. Will get replaced by `auto_index`
        index "index.html"

        root "html"
    }
}
